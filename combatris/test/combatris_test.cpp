#define CATCH_CONFIG_MAIN  // This tells Catch to provide a main() - only do this in one cpp file

#include "game/matrix.h"
#include "game/assets.h"

#include <tuple>
#include "catch.hpp"

namespace {

std::tuple<std::shared_ptr<Assets>, std::shared_ptr<Matrix>> SetupTestHarness(const Matrix::Type& test_matrix) {
  auto asset_manager = std::make_shared<Assets>(nullptr);
  auto matrix = std::make_shared<Matrix>(test_matrix, asset_manager->GetTetrominos());

  return std::make_tuple(asset_manager, matrix);
}

} // namespace

const std::vector<std::vector<int>> kClearTopRowBefore {
  {0, 0, 0, 0, 1, 1, 1, 1, 1, 1}, // 01
  {5, 5, 5, 5, 5, 5, 0, 0, 0, 0}, // 02
  {0, 0, 0, 0, 0, 5, 0, 0, 0, 0}, // 03
  {0, 0, 0, 0, 0, 5, 0, 0, 0, 0}, // 04
  {0, 0, 0, 0, 0, 5, 0, 0, 0, 0}, // 05
  {0, 0, 0, 0, 0, 5, 0, 0, 0, 0}, // 06
  {0, 0, 0, 0, 0, 5, 0, 0, 0, 0}, // 07
  {0, 0, 0, 0, 0, 5, 0, 0, 0, 0}, // 08
  {0, 0, 0, 0, 0, 5, 0, 0, 0, 0}, // 09
  {0, 0, 0, 0, 0, 5, 0, 0, 0, 0}, // 10
  {0, 0, 0, 0, 0, 5, 0, 0, 0, 0}, // 11
  {0, 0, 0, 0, 0, 5, 0, 0, 0, 0}, // 12
  {0, 0, 0, 0, 0, 5, 0, 0, 0, 0}, // 13
  {0, 0, 0, 0, 0, 5, 0, 0, 0, 0}, // 14
  {0, 0, 1, 1, 1, 1, 1, 1, 0, 0}, // 15
  {0, 0, 1, 1, 1, 1, 1, 1, 0, 0}, // 16
  {0, 0, 0, 1, 1, 1, 1, 0, 0, 0}, // 17
  {1, 1, 0, 1, 1, 1, 1, 0, 1, 1}, // 18
  {1, 0, 0, 1, 1, 1, 1, 0, 0, 1}, // 19
  {1, 1, 0, 1, 1, 1, 1, 0, 1, 1}  // 20
};

const std::vector<std::vector<int>> kClearTopRowAfter {
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 01
  {5, 5, 5, 5, 5, 5, 0, 0, 0, 0}, // 02
  {0, 0, 0, 0, 0, 5, 0, 0, 0, 0}, // 03
  {0, 0, 0, 0, 0, 5, 0, 0, 0, 0}, // 04
  {0, 0, 0, 0, 0, 5, 0, 0, 0, 0}, // 05
  {0, 0, 0, 0, 0, 5, 0, 0, 0, 0}, // 06
  {0, 0, 0, 0, 0, 5, 0, 0, 0, 0}, // 07
  {0, 0, 0, 0, 0, 5, 0, 0, 0, 0}, // 08
  {0, 0, 0, 0, 0, 5, 0, 0, 0, 0}, // 09
  {0, 0, 0, 0, 0, 5, 0, 0, 0, 0}, // 10
  {0, 0, 0, 0, 0, 5, 0, 0, 0, 0}, // 11
  {0, 0, 0, 0, 0, 5, 0, 0, 0, 0}, // 12
  {0, 0, 0, 0, 0, 5, 0, 0, 0, 0}, // 13
  {0, 0, 0, 0, 0, 5, 0, 0, 0, 0}, // 14
  {0, 0, 1, 1, 1, 1, 1, 1, 0, 0}, // 15
  {0, 0, 1, 1, 1, 1, 1, 1, 0, 0}, // 16
  {0, 0, 0, 1, 1, 1, 1, 0, 0, 0}, // 17
  {1, 1, 0, 1, 1, 1, 1, 0, 1, 1}, // 18
  {1, 0, 0, 1, 1, 1, 1, 0, 0, 1}, // 19
  {1, 1, 0, 1, 1, 1, 1, 0, 1, 1}  // 20
};

TEST_CASE("ClearLinesAtTop") {
  auto [asset_manager, matrix] = SetupTestHarness(kClearTopRowBefore);

  auto tetrominos = asset_manager->GetTetrominos();

  Position insert_pos(0, kVisibleColStart);

  auto [lines_cleared, tspin_type, perfect_clear] = matrix->Commit(Tetromino::Type::I, Tetromino::Moves::Down, insert_pos,
                 tetrominos.at(static_cast<int>(Tetromino::Type::I) - 1)
                     ->GetRotationData(Tetromino::Angle::A0));

  REQUIRE(lines_cleared.size() == 1);
  REQUIRE(*matrix == kClearTopRowAfter);
}

const std::vector<std::vector<int>> kClearedLineWithGarbageBetweenBefore {
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 01
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 02
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 03
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 04
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 05
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 06
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 07
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 08
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 09
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 10
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 11
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 12
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 13
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 14
  {1, 0, 1, 1, 1, 1, 1, 1, 0, 0}, // 15
  {1, 0, 1, 1, 1, 1, 1, 1, 1, 1}, // 16
  {1, 0, 0, 1, 1, 1, 1, 0, 0, 0}, // 17
  {1, 0, 0, 1, 1, 1, 1, 0, 1, 1}, // 18
  {1, 0, 1, 1, 1, 1, 1, 1, 1, 1}, // 19
  {1, 1, 0, 1, 1, 1, 1, 0, 1, 1}  // 20
};

const std::vector<std::vector<int>> kClearedLineWithGarbageBetweenAfter {
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 01
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 02
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 03
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 04
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 05
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 06
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 07
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 08
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 09
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 10
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 11
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 12
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 13
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 14
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 13
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 14
  {1, 0, 1, 1, 1, 1, 1, 1, 0, 0}, // 15
  {1, 1, 0, 1, 1, 1, 1, 0, 0, 0}, // 17
  {1, 1, 0, 1, 1, 1, 1, 0, 1, 1}, // 18
  {1, 1, 0, 1, 1, 1, 1, 0, 1, 1}  // 20
};

TEST_CASE("ClearedLineWithGarbageBetween") {
  auto [asset_manager, matrix] = SetupTestHarness(kClearedLineWithGarbageBetweenBefore);

  auto tetrominos = asset_manager->GetTetrominos();

  Position insert_pos(kVisibleRowStart + 15, kVisibleColStart - 1);

  auto[lines_cleared, tspin_type, perfect_clear] =
      matrix->Commit(Tetromino::Type::I, Tetromino::Moves::Down, insert_pos,
                     tetrominos.at(static_cast<int>(Tetromino::Type::I) - 1)
                         ->GetRotationData(Tetromino::Angle::A90));

  REQUIRE(lines_cleared.size() == 2);
  REQUIRE(*matrix == kClearedLineWithGarbageBetweenAfter);
}

const std::vector<std::vector<int>> kTSpinMatrix {
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 01
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 02
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 03
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 04
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 05
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 06
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 07
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 08
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 09
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 10
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 11
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 12
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 13
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 14
  {0, 0, 1, 1, 1, 1, 1, 1, 0, 0}, // 15
  {0, 0, 1, 1, 1, 1, 1, 1, 0, 0}, // 16
  {0, 0, 0, 1, 1, 1, 1, 0, 0, 0}, // 17
  {1, 1, 0, 1, 1, 1, 1, 0, 1, 1}, // 18
  {1, 0, 0, 1, 1, 1, 1, 0, 0, 1}, // 19
  {1, 1, 0, 1, 1, 1, 1, 0, 1, 1}  // 20
};

TEST_CASE("MatchT-spin") {
  REQUIRE(true);
}


const std::vector<std::vector<int>> kTSpinMatrix1 {
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 01
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 02
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 03
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 04
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 05
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 06
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 07
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 08
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 09
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 10
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 11
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 12
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 13
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 14
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 15
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 16
  {0, 0, 0, 0, 0, 0, 0, 0, 1, 0}, // 17
  {0, 0, 0, 0, 0, 0, 0, 0, 1, 1}, // 18
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 1}, // 19
  {1, 1, 1, 1, 1, 1, 1, 0, 1, 1}  // 20
};

const std::vector<std::vector<int>> kTSpinMatrix2 {
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 01
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 02
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 03
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 04
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 05
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 06
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 07
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 08
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 09
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 10
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 11
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 12
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 13
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 14
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 15
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 16
  {0, 0, 0, 1, 1, 0, 0, 0, 0, 0}, // 17
  {0, 0, 0, 1, 1, 0, 0, 0, 0, 0}, // 18
  {1, 1, 1, 1, 0, 0, 0, 1, 1, 1}, // 19
  {1, 1, 1, 1, 1, 0, 1, 1, 1, 1}  // 20
};

const std::vector<std::vector<int>> kTSpinMiniMatrix3 {
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 01
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 02
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 03
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 04
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 05
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 06
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 07
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 08
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 09
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 10
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 11
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 12
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 13
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 14
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 15
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 16
  {0, 0, 0, 0, 0, 0, 1, 0, 0, 0}, // 17
  {0, 0, 0, 0, 0, 0, 1, 0, 0, 0}, // 18
  {0, 0, 0, 0, 0, 0, 1, 0, 0, 0}, // 19
  {1, 1, 1, 1, 1, 0, 1, 1, 1, 1}  // 20
};

const std::vector<std::vector<int>> kTSpinCombo {
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 01
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 02
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 03
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 04
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 05
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 06
  {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}, // 07
  {1, 1, 1, 1, 1, 1, 0, 0, 0, 0}, // 08
  {1, 1, 1, 1, 1, 1, 1, 1, 0, 0}, // 09
  {1, 1, 1, 1, 1, 1, 1, 1, 0, 0}, // 10
  {1, 1, 1, 1, 1, 1, 1, 0, 0, 0}, // 11
  {1, 1, 1, 1, 1, 1, 1, 0, 1, 1}, // 12
  {1, 1, 1, 1, 1, 1, 1, 0, 0, 1}, // 13
  {1, 1, 1, 1, 1, 1, 1, 0, 1, 1}, // 14
  {1, 1, 1, 1, 1, 1, 1, 0, 1, 1}, // 15
  {1, 1, 1, 1, 1, 1, 1, 0, 0, 1}, // 16
  {1, 1, 1, 1, 1, 1, 1, 0, 1, 1}, // 17
  {1, 1, 1, 1, 1, 1, 1, 0, 1, 1}, // 18
  {1, 1, 1, 1, 1, 1, 1, 0, 0, 1}, // 19
  {1, 1, 1, 1, 1, 1, 1, 0, 1, 1}  // 20
};
